{"version":3,"sources":["../src/imports.js"],"names":["normalizeImportsConfig","unrollImportsConfig","importsConfig","normalized","Object","keys","forEach","namespace","version","pkgName","imports","Error","name"],"mappings":";;;;;QAKgBA,sB,GAAAA,sB;QAyBAC,mB,GAAAA,mB;AA9BhB;;;;;AAKO,SAASD,sBAAT,CAAgCE,aAAhC,EAA+C;AACrD,KAAIC,aAAa,EAAjB;;AAEAC,QAAOC,IAAP,CAAYH,aAAZ,EAA2BI,OAA3B,CAAmC,qBAAa;AAC/CF,SAAOC,IAAP,CAAYH,cAAcK,SAAd,CAAZ,EAAsCD,OAAtC,CAA8C,mBAAW;AACxD,OAAME,UAAUN,cAAcK,SAAd,EAAyBE,OAAzB,CAAhB;;AAEA,OAAIA,YAAY,GAAhB,EAAqB;AACpBA,cAAUF,SAAV;AACAA,gBAAY,EAAZ;AACA;;AAEDJ,cAAWI,SAAX,IAAwBJ,WAAWI,SAAX,KAAyB,EAAjD;AACAJ,cAAWI,SAAX,EAAsBE,OAAtB,IAAiCD,OAAjC;AACA,GAVD;AAWA,EAZD;;AAcA,QAAOL,UAAP;AACA;;AAED;;;;;AAKO,SAASF,mBAAT,CAA6BC,aAA7B,EAA4C;AAClDA,iBAAgBF,uBAAuBE,iBAAiB,EAAxC,CAAhB;;AAEA,KAAIQ,UAAU,EAAd;;AAEAN,QAAOC,IAAP,CAAYH,aAAZ,EAA2BI,OAA3B,CAAmC,qBAAa;AAC/CF,SAAOC,IAAP,CAAYH,cAAcK,SAAd,CAAZ,EAAsCD,OAAtC,CAA8C,mBAAW;AACxD,OAAII,QAAQD,OAAR,CAAJ,EAAsB;AACrB,UAAM,IAAIE,KAAJ,cACMF,OADN,wCAAN;AAGA;;AAEDC,WAAQD,OAAR,IAAmB;AAClBG,UAAML,SADY;AAElBC,aAASN,cAAcK,SAAd,EAAyBE,OAAzB;AAFS,IAAnB;AAIA,GAXD;AAYA,EAbD;;AAeA,QAAOC,OAAP;AACA","file":"imports.js","sourcesContent":["/**\n * Normalize an imports configuration to canonicalize all syntactic sugar.\n * @param  {Object} importsConfig the configuration in its original format\n * @return {Object} the normalized configuration after resolving all syntactic sugar\n */\nexport function normalizeImportsConfig(importsConfig) {\n\tlet normalized = {};\n\n\tObject.keys(importsConfig).forEach(namespace => {\n\t\tObject.keys(importsConfig[namespace]).forEach(pkgName => {\n\t\t\tconst version = importsConfig[namespace][pkgName];\n\n\t\t\tif (pkgName === '/') {\n\t\t\t\tpkgName = namespace;\n\t\t\t\tnamespace = '';\n\t\t\t}\n\n\t\t\tnormalized[namespace] = normalized[namespace] || {};\n\t\t\tnormalized[namespace][pkgName] = version;\n\t\t});\n\t});\n\n\treturn normalized;\n}\n\n/**\n * Unrolls the imports configuration section of .npmbundlerrc file.\n * @param  {Object} importsConfig the configuration in its original format\n * @return {Object} the unrolled configuration with one entry per module name\n */\nexport function unrollImportsConfig(importsConfig) {\n\timportsConfig = normalizeImportsConfig(importsConfig || {});\n\n\tlet imports = {};\n\n\tObject.keys(importsConfig).forEach(namespace => {\n\t\tObject.keys(importsConfig[namespace]).forEach(pkgName => {\n\t\t\tif (imports[pkgName]) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Package ${pkgName} is mapped to more than one import`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\timports[pkgName] = {\n\t\t\t\tname: namespace,\n\t\t\t\tversion: importsConfig[namespace][pkgName],\n\t\t\t};\n\t\t});\n\t});\n\n\treturn imports;\n}\n"]}