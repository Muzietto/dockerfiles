'use strict';

var projectDir = process.cwd();
var cfg = require('../config');

beforeEach(function () {
  process.chdir(projectDir + '/packages/liferay-npm-bundler/src/__tests__/config/' + 'default');
  cfg.reloadConfig();
});

afterEach(function () {
  process.chdir(projectDir);
});

describe('getOutputDir()', function () {
  it('works', function () {
    expect(cfg.getOutputDir()).toEqual('output-dir');
  });
});

describe('getExclusions()', function () {
  it('works for unversioned packages', function () {
    var pkg = {
      id: 'package-a@2.0.0',
      name: 'package-a',
      version: '2.0.0',
      dir: ''
    };

    expect(cfg.getExclusions(pkg)).toEqual(['*']);
  });

  it('works for versioned packages', function () {
    var pkg = {
      id: 'package-b@1.0.0',
      name: 'package-b',
      version: '1.0.0',
      dir: ''
    };

    expect(cfg.getExclusions(pkg)).toEqual(['**/*.js', '**/*.css']);
  });

  it('returns the default exclusions for unconfigured packages', function () {
    var pkg = {
      id: 'not-existent-package@1.0.0',
      name: 'not-existent-package',
      version: '1.0.0',
      dir: ''
    };

    expect(cfg.getExclusions(pkg)).toEqual(['test/**/*']);
  });

  // Impossible to test once we test for default exclusions
  it('returns an empty array for unconfigured packages', function () {
    process.chdir(projectDir + '/packages/liferay-npm-bundler/src/__tests__/config/' + 'empty');
    cfg.reloadConfig();

    var pkg = {
      id: 'not-existent-package@1.0.0',
      name: 'not-existent-package',
      version: '1.0.0',
      dir: ''
    };

    expect(cfg.getExclusions(pkg)).toEqual([]);
  });
});

describe('getPlugins()', function () {
  it('loads default "pre" plugins correctly', function () {
    var plugins = cfg.getPlugins('pre', {
      id: 'package-star@1.0.0',
      name: 'package-star',
      version: '1.0.0',
      dir: ''
    });

    expect(plugins[0].run({}, {})).toEqual(0);
    expect(plugins[0].config).toEqual({});

    expect(plugins[1].run({}, {})).toEqual(1);
    expect(plugins[1].config).toEqual('config-1');
  });

  it('loads default "post" plugins correctly', function () {
    var plugins = cfg.getPlugins('post', {
      id: 'package-star@1.0.0',
      name: 'package-star',
      version: '1.0.0',
      dir: ''
    });

    expect(plugins[0].run({}, {})).toEqual(2);
    expect(plugins[0].config).toEqual({});

    expect(plugins[1].run({}, {})).toEqual(3);
    expect(plugins[1].config).toEqual('config-3');
  });

  it('loads per-package "pre" plugins correctly', function () {
    var plugins = cfg.getPlugins('pre', {
      id: 'package@1.0.0',
      name: 'package',
      version: '1.0.0',
      dir: ''
    });

    expect(plugins[0].run({}, {})).toEqual(4);
    expect(plugins[0].config).toEqual({});

    expect(plugins[1].run({}, {})).toEqual(5);
    expect(plugins[1].config).toEqual('config-5');
  });

  it('loads per-package "post" plugins correctly', function () {
    var plugins = cfg.getPlugins('post', {
      id: 'package@1.0.0',
      name: 'package',
      version: '1.0.0',
      dir: ''
    });

    expect(plugins[0].run({}, {})).toEqual(6);
    expect(plugins[0].config).toEqual({});

    expect(plugins[1].run({}, {})).toEqual(7);
    expect(plugins[1].config).toEqual('config-7');
  });
});

describe('getBabelConfig()', function () {
  it('loads default config correctly', function () {
    var config = cfg.getBabelConfig({
      id: 'package-star@1.0.0',
      name: 'package-star',
      version: '1.0.0',
      dir: ''
    });

    expect(config).toEqual({ config: 'config-*' });
  });

  it('loads per-package config correctly', function () {
    var config = cfg.getBabelConfig({
      id: 'package@1.0.0',
      name: 'package',
      version: '1.0.0',
      dir: ''
    });

    expect(config).toEqual({ config: 'config-package@1.0.0' });
  });
});
//# sourceMappingURL=config.test.js.map