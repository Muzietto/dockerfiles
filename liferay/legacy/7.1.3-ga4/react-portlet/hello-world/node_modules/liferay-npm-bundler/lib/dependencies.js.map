{"version":3,"sources":["../src/dependencies.js"],"names":["getPackageDependencies","basedir","pkgs","packageJson","join","pkgId","name","version","id","dir","dependencies","dependencyDirs","Object","keys","map","dependency","resolveDependencyDir","filter","dependencyDir","forEach","depPkgs","packageDir","pkgJsonFile","sync","dirname"],"mappings":";;;;;QAgBgBA,sB,GAAAA,sB;;AAhBhB;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;AAYO,SAASA,sBAAT,CAAgCC,OAAhC,EAAyC;AAC9C,MAAMC,OAAO,EAAb;;AAEA,MAAMC,cAAc,4BAAa,eAAKC,IAAL,CAAUH,OAAV,EAAmB,eAAnB,CAAb,CAApB;AACA,MAAMI,QAAQF,YAAYG,IAAZ,GAAmB,GAAnB,GAAyBH,YAAYI,OAAnD;;AAEAL,OAAKG,KAAL,IAAc;AACZG,QAAIH,KADQ;AAEZC,UAAMH,YAAYG,IAFN;AAGZC,aAASJ,YAAYI,OAHT;AAIZE,SAAKR;AAJO,GAAd;;AAOA,MAAMS,eAAeP,YAAYO,YAAZ,IAA4B,EAAjD;;AAEA,MAAIC,iBAAiBC,OAAOC,IAAP,CAAYH,YAAZ,EAA0BI,GAA1B,CAA8B,UAASC,UAAT,EAAqB;AACtE,WAAOC,qBAAqBf,OAArB,EAA8Bc,UAA9B,CAAP;AACD,GAFoB,CAArB;;AAIAJ,mBAAiBA,eAAeM,MAAf,CAAsB,yBAAiB;AACtD,WAAOC,iBAAiB,IAAxB;AACD,GAFgB,CAAjB;;AAIAP,iBAAeQ,OAAf,CAAuB,UAASD,aAAT,EAAwB;AAC7C,QAAME,UAAUpB,uBAAuBkB,aAAvB,CAAhB;;AAEAN,WAAOC,IAAP,CAAYO,OAAZ,EAAqBD,OAArB,CAA6B,UAASd,KAAT,EAAgB;AAC3CH,WAAKG,KAAL,IAAce,QAAQf,KAAR,CAAd;AACD,KAFD;AAGD,GAND;;AAQA,SAAOH,IAAP;AACD;;AAED;;;;;;AAMA,SAASc,oBAAT,CAA8BK,UAA9B,EAA0CN,UAA1C,EAAsD;AACpD,MAAMO,cAAc,kBAAcC,IAAd,CAAmBR,aAAa,eAAhC,EAAiD;AACnEd,aAASoB;AAD0D,GAAjD,CAApB;;AAIA,SAAO,eAAKG,OAAL,CAAaF,WAAb,CAAP;AACD","file":"dependencies.js","sourcesContent":["import path from 'path';\nimport readJsonSync from 'read-json-sync';\nimport resolveModule from 'resolve';\n\n/**\n * Recursively find the dependencies of a package and return them as \n * @param {String} basedir directory where package lives in\n * @return {Object} a hash of objects where key is the package id and values \n *         have the following structure:\n *           {\n *             id: <package id>,     // a unique `name@version` string\n *             name: <package name>, \n *             version: <package version>,\n *             dir: <package dir>\n *           }\n */\nexport function getPackageDependencies(basedir) {\n  const pkgs = {};\n\n  const packageJson = readJsonSync(path.join(basedir, '/package.json'));\n  const pkgId = packageJson.name + '@' + packageJson.version;\n\n  pkgs[pkgId] = {\n    id: pkgId,\n    name: packageJson.name,\n    version: packageJson.version,\n    dir: basedir,\n  };\n\n  const dependencies = packageJson.dependencies || [];\n\n  let dependencyDirs = Object.keys(dependencies).map(function(dependency) {\n    return resolveDependencyDir(basedir, dependency);\n  });\n\n  dependencyDirs = dependencyDirs.filter(dependencyDir => {\n    return dependencyDir != null;\n  });\n\n  dependencyDirs.forEach(function(dependencyDir) {\n    const depPkgs = getPackageDependencies(dependencyDir);\n\n    Object.keys(depPkgs).forEach(function(pkgId) {\n      pkgs[pkgId] = depPkgs[pkgId];\n    });\n  });\n\n  return pkgs;\n}\n\n/**\n * Resolves a dependency package and returns its directory.\n * @param {String} packageDir the base directory used for resolution \n * @param {String} dependency a package name\n * @return {String} the path of the directory containing the dependency package\n */\nfunction resolveDependencyDir(packageDir, dependency) {\n  const pkgJsonFile = resolveModule.sync(dependency + '/package.json', {\n    basedir: packageDir,\n  });\n\n  return path.dirname(pkgJsonFile);\n}\n"]}