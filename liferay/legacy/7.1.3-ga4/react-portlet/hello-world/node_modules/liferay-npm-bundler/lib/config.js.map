{"version":3,"sources":["../src/config.js"],"names":["reloadConfig","getOutputDir","getExclusions","loadBabelPlugins","getPlugins","getBabelConfig","isProcessSerially","isVerbose","pluginsBaseDir","config","loadConfig","err","code","preset","presetFile","sync","basedir","Object","assign","configRequire","module","pluginFile","require","dir","normalize","pkg","exclusions","exclude","id","name","presets","plugins","concat","map","presetModule","default","phase","pluginsKey","pluginConfig","Array","isArray","pluginName","pluginModule","run","babelConfig"],"mappings":"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","file":"config.js","sourcesContent":["import {getPackageDir} from 'liferay-npm-build-tools-common/lib/packages';\nimport path from 'path';\nimport readJsonSync from 'read-json-sync';\nimport resolveModule from 'resolve';\n\nlet pluginsBaseDir = '.';\nlet config = loadConfig();\n\n/**\n * Load configuration at startup.\n * @return {Object} the configuration object\n */\nfunction loadConfig() {\n  // Load base configuration\n  let config = {};\n\n  try {\n    config = readJsonSync('.npmbundlerrc');\n  } catch (err) {\n    if (err.code !== 'ENOENT') {\n      throw err;\n    }\n  }\n\n  // Apply preset if necessary\n  if (config.preset) {\n    const presetFile = resolveModule.sync(config.preset, {\n      basedir: '.',\n    });\n\n    // Merge preset with base configuration\n    config = Object.assign(readJsonSync(presetFile), config);\n    pluginsBaseDir = getPackageDir(presetFile);\n  }\n\n  return config;\n}\n\n/**\n * Require a module using the configured plugins directory.\n * @param {String} module a module name\n * @return {Object} the required module object\n */\nfunction configRequire(module) {\n  const pluginFile = resolveModule.sync(module, {\n    basedir: pluginsBaseDir,\n  });\n\n  return require(pluginFile);\n}\n\n/**\n * Force a config reload\n * @return {void}\n */\nexport function reloadConfig() {\n  config = loadConfig();\n}\n\n/**\n * Get the configured output directory\n * @return {String} the directory path (with native separators)\n */\nexport function getOutputDir() {\n  let dir = config['output'] || 'build/resources/main/META-INF/resources';\n  return path.normalize(dir);\n}\n\n/**\n * Get the configured file exclusions for a given package.\n * @param {Object} pkg the package descriptor hash containing id, name, version\n *        and dir fields\n * @return {Array} an array of glob expressions\n */\nexport function getExclusions(pkg) {\n  let exclusions = config.exclude || {};\n\n  exclusions =\n    exclusions[pkg.id] || exclusions[pkg.name] || exclusions['*'] || [];\n\n  return exclusions;\n}\n\n/**\n * Load Babel plugins from a given array of presets and plugins.\n * @param {Array} presets an array of Babel preset names as defined by .babelrc\n * @param {Array} plugins an array of Babel plugins names as defined by .babelrc\n * @return {Array} the instantiated Babel plugins\n */\nexport function loadBabelPlugins(presets, plugins) {\n  // TODO: if plugins have config decide what to do with it\n  return []\n    .concat(\n      ...presets.map(preset => {\n        let presetModule;\n\n        try {\n          presetModule = configRequire(preset);\n        } catch (err) {\n          presetModule = configRequire(`babel-preset-${preset}`);\n        }\n\n        return presetModule.default().plugins;\n      })\n    )\n    .concat(...plugins);\n}\n\n/**\n * Get the liferay-nmp-bundler plugins for a given package.\n * @param {String} phase 'pre' or 'post'\n * @param {Object} pkg the package descriptor hash containing id, name, version\n *        and dir fields\n * @return {Array} the instantiated Babel plugins\n */\nexport function getPlugins(phase, pkg) {\n  const pluginsKey = phase === 'pre' ? 'plugins' : 'post-plugins';\n\n  let plugins = [];\n\n  if (config[pkg.id] && config[pkg.id][pluginsKey]) {\n    plugins = config[pkg.id][pluginsKey];\n  } else if (config['*'] && config['*'][pluginsKey]) {\n    plugins = config['*'][pluginsKey];\n  }\n\n  return plugins.map(pluginName => {\n    let pluginConfig = {};\n\n    if (Array.isArray(pluginName)) {\n      pluginConfig = pluginName[1];\n      pluginName = pluginName[0];\n    }\n\n    const pluginModule = configRequire(\n      `liferay-npm-bundler-plugin-${pluginName}`\n    );\n\n    return {\n      run: pluginModule.default,\n      config: pluginConfig,\n    };\n  });\n}\n\n/**\n * Get Babel config for a given package\n * @param {Object} pkg the package descriptor hash containing id, name, version\n *        and dir fields\n * @return {Object} a Babel configuration object as defined by its API\n */\nexport function getBabelConfig(pkg) {\n  let babelConfig = {};\n\n  if (config[pkg.id] && config[pkg.id]['.babelrc']) {\n    babelConfig = config[pkg.id]['.babelrc'];\n  } else if (config['*'] && config['*']['.babelrc']) {\n    babelConfig = config['*']['.babelrc'];\n  }\n\n  return babelConfig;\n}\n\n/**\n * Whether or not to process npm packages serially\n * @return {boolean}\n */\nexport function isProcessSerially() {\n  return config['process-serially'] || false;\n}\n\n/**\n * Whether or not to dump detailed information about what the tool is doing\n * @return {boolean}\n */\nexport function isVerbose() {\n  return config['verbose'] || false;\n}\n"]}